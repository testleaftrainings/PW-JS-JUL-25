
## üìù Workflow Name

```yaml
name: Playwright Tests
```

* This is just the **name** of the workflow (shows up in GitHub Actions tab).

---

## When it Runs

```yaml
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
```

* Runs **automatically** whenever:

  * You push code to `main` or `master` branches.
  * You open a pull request into `main` or `master`.

---

## Job Definition

```yaml
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
```

* Defines a **job** called `test`.
* Runs on a fresh **Ubuntu Linux** machine in GitHub‚Äôs cloud.
* Will stop if it runs longer than **60 minutes**.

---

## Steps in the Job

### 1. Checkout Code

```yaml
- uses: actions/checkout@v4
```

* Downloads your repository code into the workflow environment.

### 2. Setup Node.js

```yaml
- uses: actions/setup-node@v4
  with:
    node-version: lts/*
```

* Installs **Node.js (latest LTS version)** ‚Üí needed for Playwright.

### 3. Install Dependencies

```yaml
- name: Install dependencies
  run: npm ci
```

* Runs `npm ci` (clean install of dependencies from `package-lock.json`).

### 4. Install Playwright Browsers

```yaml
- name: Install Playwright Browsers
  run: npx playwright install --with-deps
```

* Downloads Playwright‚Äôs browsers (Chromium, Firefox, WebKit) + system deps.

### 5. Run Playwright Tests

```yaml
- name: Run Playwright tests
  run: npx playwright test
```

* Executes all your **Playwright test files**.

### 6. Save Test Report

```yaml
- uses: actions/upload-artifact@v4
  if: ${{ !cancelled() }}
  with:
    name: playwright-report
    path: playwright-report/
    retention-days: 30
```

* Uploads the **Playwright HTML test report** as an artifact.
* Keeps it for **30 days**.
* You can download it from the GitHub Actions run page.

---

‚úÖ **In simple terms:**
This workflow makes sure that every time you push or open a PR, your Playwright tests are automatically run on GitHub‚Äôs servers. If tests fail, you‚Äôll see it in the Actions tab, and you can also download the test report.
