📑 Agenda for Week 06 Day 01: REST API Fundamentals  

🎯 [ Focus: Understanding the core concepts and hands-on implementation of REST APIs ]  

📆 Date: 23 Aug. [Saturday]  

🕝 Session Highlights  

⿡ Recap  
* Quick review of key learnings from previous sessions.  

⿢ Introduction to REST API  
* Overview of REST architecture and principles.  

⿣ Headers  
* Understanding HTTP headers and their significance in API requests.  

⿤ Verbs (POST, PUT, GET, DELETE, PATCH)  
* Explanation of HTTP methods and their use cases.  

⿥ Request Body & Response Body  
* Understanding the structure and purpose of request and response payloads.  

⿦ Authorization Types  
* Overview of different authorization methods (e.g., Basic Auth, OAuth2).

⿧ Implementation in Postman - POST & GET Incident Without Global Variable [ServiceNow]
* Demonstration: Creating and retrieving Incidents.

⿨ Create Incident in ServiceNow
* Practical exercise: Working with Lead using POST and GET requests.  

⿧ Implementation in Postman - POST & GET Lead Without Global Variable [Salesforce]  
* Demonstration: Creating and retrieving leads.  


🕡 Wrap Up / Q&A  

📝 Keep your physical notebook and pen handy to sketch out ideas!



API Fundamentals:


REST API -> Representational State Transfer Application Programming Interface.



Interview Based Questions :
-------------------------

1. Architectute Type?
REST API's follow's Client server archirtecture.
Micro services.

2. HTTP Request Methods :
POST, PUT, PATCH, GET, DELETE

3. Difference between URI and URL?

A URI (Uniform Resource Identifier) is a string that uniquely identifies a resource, while a URL (Uniform Resource Locator) is a type of URI that specifies the resource’s location (address) and how to access it.

4. Stateless/ Statefull?
REST API follow stateless, which means request contains all the information needed to process your activity. 

5.Difference between Authentication and Authorization?
Authentication verifies identity , while authorization checks access rights.

6. Various Response Code?
Response Codes liek 200 (OK), 401(Unauthorized), 404(NOt found)..

7. Request Headers ?

Headers are key-value pairs sent along with the request that describe how the client and server should communicate.

Example : 
Content-Type: application/json
Accept: application/json
Authorization: Bearer <token>

8. Schema Validation and response validation?

Schema Validation :
Schema validation checks if the data structure (keys + value types) in the response matches the expected format.

Example:

{
"id":101,
"name":"Ravi",
"isActive":true
}

{
"id":"101",           //id is a string not a number
"name":"Ravi",
"isActive":true
}

Response validation:
Response validation checks the actual values returned, not just the data type.

Example:

{
"id":101,
"name":"Ravi",
"isActive":true
}

{
"id":"101",           //wrong value reponse validation
"name":"Ravi",
"isActive":false
}

---

9. Difference between REST API and REST ASSURED?

REST API is the actual web services, while REST ASSURED is a Java Library used to test REST API's.

---
10. Path parameter and query parameter?


---
11. Five Steps process for API testing
------------------------------------

1. Documentation
: Understanding the API’s purpose, structure, and usage guidelines before testing.
Example: 
: Reading Swagger docs that describe how the incident API works in an application.

2. Endpoints: 
: Specific URLs that represent resources or actions to be tested.
Example: 
: https://dev356721.service-now.com/api/now/table/incident (incident resource).

3. Methods: 
: HTTP operations (GET, POST, PUT, DELETE, etc.) that define the type of action on the resource.
Example: 
: GET /incident → fetch incidents; POST /incident → create a new incident.

4. Headers: 
: Metadata sent with requests or responses to control and describe API behavior.
Example: 
Content-Type: application/json, Accept: application/json.

5. Authorization: 
: Security mechanism to verify and allow only valid users or systems to access the API.
Example: 
Authorization: Bearer <token> or Basic Auth with username & password.

Together, these 5 steps ensure your API test covers what, where, how, and who can access the service.
********************************************************************************************